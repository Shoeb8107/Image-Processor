
/* THIS FILE IS GENERATED BY rust-cpp. DO NOT EDIT */

#include "stdint.h" // For {u}intN_t
#include <new> // For placement new
#include <cstdlib> // For abort
#include <type_traits>
#include <utility>

namespace rustcpp {

// We can't just pass or return any type from extern "C" rust functions (because the call
// convention may differ between the C++ type, and the Rust type).
// So we make sure to pass trivial structure that only contains a pointer to the object we want to
// pass. The constructor of these helper class contains a 'container' of the right size which will
// be allocated on the stack.
template<typename T> struct return_helper {
    struct container {
#if defined (_MSC_VER) && (_MSC_VER + 0 < 1900)
        char memory[sizeof(T)];
        ~container() { reinterpret_cast<T*>(this)->~T(); }
#else
        // The fact that it is in an union means it is properly sized and aligned, but we have
        // to call the destructor and constructor manually
        union { T memory; };
        ~container() { memory.~T(); }
#endif
        container() {}
    };
    const container* data;
    return_helper(int, const container &c = container()) : data(&c) { }
};

template<typename T> struct argument_helper {
    using type = const T&;
};
template<typename T> struct argument_helper<T&> {
    T &ref;
    argument_helper(T &x) : ref(x) {}
    using type = argument_helper<T&> const&;
};

template<typename T>
typename std::enable_if<std::is_copy_constructible<T>::value>::type copy_helper(const void *src, void *dest)
{ new (dest) T (*static_cast<T const*>(src)); }
template<typename T>
typename std::enable_if<!std::is_copy_constructible<T>::value>::type copy_helper(const void *, void *)
{ std::abort(); }
template<typename T>
typename std::enable_if<std::is_default_constructible<T>::value>::type default_helper(void *dest)
{ new (dest) T(); }
template<typename T>
typename std::enable_if<!std::is_default_constructible<T>::value>::type default_helper(void *)
{ std::abort(); }

template<typename T> int compare_helper(const T &a, const T&b, int cmp) {
    switch (cmp) {
        using namespace std::rel_ops;
        case 0:
            if (a < b)
                return -1;
            if (b < a)
                return 1;
            return 0;
        case -2: return a < b;
        case 2: return a > b;
        case -1: return a <= b;
        case 1: return a >= b;
    }
    std::abort();
}
}

#define RUST_CPP_CLASS_HELPER(HASH, ...) \
    extern "C" { \
    void __cpp_destructor_##HASH(void *ptr) { typedef __VA_ARGS__ T; static_cast<T*>(ptr)->~T(); } \
    void __cpp_copy_##HASH(const void *src, void *dest) { rustcpp::copy_helper<__VA_ARGS__>(src, dest); } \
    void __cpp_default_##HASH(void *dest) { rustcpp::default_helper<__VA_ARGS__>(dest); } \
    }

#line 7 "src/io/oiio.rs"
       
    #include <OpenImageIO/paramlist.h>
    #include <OpenImageIO/typedesc.h>
    #include <OpenImageIO/imageio.h>
    #include <OpenImageIO/imagebuf.h>
    #include <OpenImageIO/imagebufalgo.h>
    using namespace OIIO;


#line 220 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

extern "C" {
void __cpp_closure_3695883428175493041(ImageOutput* const& image_output) {
#line 33 "src/io/oiio.rs"
                                                   
                image_output->close();
            
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline ImageOutput* __cpp_closure_800440552892512734_impl(const char * const& filename) {
#line 65 "src/io/oiio.rs"
                                                                            
                std::unique_ptr<ImageOutput> out = ImageOutput::create (filename);
                if (! out)
                    return nullptr;
                return out.release();
            
}
extern "C" {
void __cpp_closure_800440552892512734(const char * const& filename, void* __result) {
    ::new(__result) (ImageOutput*)(__cpp_closure_800440552892512734_impl(filename));
}
}
#line 220 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

extern "C" {
void __cpp_closure_2532899989878101725(ImageOutput* const& out, const char * const& filename, TypeDesc::BASETYPE const& base_type, ImageSpec * const& spec, size_t const& width, size_t const& height, size_t const& channels, const void* const& pixels) {
#line 108 "src/io/oiio.rs"
               
                ImageSpec outspec (*spec);
                outspec.width = width;
                outspec.height = height;
                outspec.nchannels = channels;
                outspec.channelnames.assign({"R", "G", "B", "A"});
                outspec.set_format(TypeDesc(base_type));
                out->open (filename, outspec);
                out->write_image (base_type, pixels);
                *spec = outspec;
            
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline bool __cpp_closure_10442838969269650884_impl(ImageOutput* const& out, size_t const& index, const char * const& filename, TypeDesc::BASETYPE const& base_type, ImageSpec * const& spec, size_t const& width, size_t const& height, size_t const& channels, const void* const& pixels) {
#line 146 "src/io/oiio.rs"
                                 
                if (!out->supports ("multiimage")){
                    return false;
                }

                ImageOutput::OpenMode mode = ImageOutput::Create;
                if (index == 0){
                    spec->width = width;
                    spec->height = height;
                    spec->nchannels = channels;
                    spec->set_format(TypeDesc(base_type));
                    out->open (filename, *spec);
                } else {
                    mode = ImageOutput::AppendSubimage;
                }

                out->write_image (base_type, pixels, mode);
                return true;
            
}
extern "C" {
void __cpp_closure_10442838969269650884(ImageOutput* const& out, size_t const& index, const char * const& filename, TypeDesc::BASETYPE const& base_type, ImageSpec * const& spec, size_t const& width, size_t const& height, size_t const& channels, const void* const& pixels, void* __result) {
    ::new(__result) (bool)(__cpp_closure_10442838969269650884_impl(out, index, filename, base_type, spec, width, height, channels, pixels));
}
}
#line 220 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

extern "C" {
void __cpp_closure_5241648081442455140(std::unique_ptr<ImageInput> const& image_input) {
#line 194 "src/io/oiio.rs"
                                                                 
                image_input->close();
            
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline std::unique_ptr<ImageInput> __cpp_closure_15954180456823282382_impl(const char * const& filename, ImageSpec* const& tmp, ImageSpec* const& config) {
#line 251 "src/io/oiio.rs"
                                                            
                std::string s(filename);
                auto input = config == nullptr ? ImageInput::open(s) : ImageInput::open(s, config);
                if (!input) {
                    return nullptr;
                }

                *tmp = input->spec();

                return input;
            
}
extern "C" {
void __cpp_closure_15954180456823282382(const char * const& filename, ImageSpec* const& tmp, ImageSpec* const& config, void* __result) {
    ::new(__result) (std::unique_ptr<ImageInput>)(__cpp_closure_15954180456823282382_impl(filename, tmp, config));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline bool __cpp_closure_5779210747185649108_impl(std::unique_ptr<ImageInput> const& input, size_t const& index, size_t const& miplevel, size_t const& channels, TypeDesc::BASETYPE const& fmt, void * const& data) {
#line 307 "src/io/oiio.rs"
                                  
                return input->read_image(index, miplevel, 0, channels, fmt, data);
            
}
extern "C" {
void __cpp_closure_5779210747185649108(std::unique_ptr<ImageInput> const& input, size_t const& index, size_t const& miplevel, size_t const& channels, TypeDesc::BASETYPE const& fmt, void * const& data, void* __result) {
    ::new(__result) (bool)(__cpp_closure_5779210747185649108_impl(input, index, miplevel, channels, fmt, data));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline ImageSpec __cpp_closure_3425811372157289386_impl() {
#line 390 "src/io/oiio.rs"
                                                 
                return ImageSpec();
            
}
extern "C" {
void __cpp_closure_3425811372157289386( void* __result) {
    ::new(__result) (ImageSpec)(__cpp_closure_3425811372157289386_impl());
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline ImageSpec __cpp_closure_17553161635844459975_impl(size_t const& w, size_t const& h, size_t const& c, TypeDesc::BASETYPE const& t) {
#line 403 "src/io/oiio.rs"
                                           
                return ImageSpec(w, h, c, t);
            
}
extern "C" {
void __cpp_closure_17553161635844459975(size_t const& w, size_t const& h, size_t const& c, TypeDesc::BASETYPE const& t, void* __result) {
    ::new(__result) (ImageSpec)(__cpp_closure_17553161635844459975_impl(w, h, c, t));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline size_t __cpp_closure_10187550477182496639_impl(const ImageSpec* const& self) {
#line 412 "src/io/oiio.rs"
                                                                    
                return (size_t)self->width;
            
}
extern "C" {
void __cpp_closure_10187550477182496639(const ImageSpec* const& self, void* __result) {
    ::new(__result) (size_t)(__cpp_closure_10187550477182496639_impl(self));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline size_t __cpp_closure_12801735462753549513_impl(const ImageSpec* const& self) {
#line 421 "src/io/oiio.rs"
                                                                    
                return (size_t)self->height;
            
}
extern "C" {
void __cpp_closure_12801735462753549513(const ImageSpec* const& self, void* __result) {
    ::new(__result) (size_t)(__cpp_closure_12801735462753549513_impl(self));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline size_t __cpp_closure_9473949099440781377_impl(const ImageSpec* const& self) {
#line 430 "src/io/oiio.rs"
                                                                    
                return (size_t)self->nchannels;
            
}
extern "C" {
void __cpp_closure_9473949099440781377(const ImageSpec* const& self, void* __result) {
    ::new(__result) (size_t)(__cpp_closure_9473949099440781377_impl(self));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline TypeDesc::BASETYPE __cpp_closure_2348365456569314999_impl(const ImageSpec* const& self) {
#line 439 "src/io/oiio.rs"
                                                                                   
                return (TypeDesc::BASETYPE)self->format.basetype;
            
}
extern "C" {
void __cpp_closure_2348365456569314999(const ImageSpec* const& self, void* __result) {
    ::new(__result) (TypeDesc::BASETYPE)(__cpp_closure_2348365456569314999_impl(self));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline const ParamValue* __cpp_closure_8409151989162682602_impl(const ImageSpec* const& self, const char* const& key_ptr) {
#line 452 "src/io/oiio.rs"
                                                                     
                ParamValue param;
                return self->find_attribute(key_ptr, param, TypeDesc::UNKNOWN, false);
            
}
extern "C" {
void __cpp_closure_8409151989162682602(const ImageSpec* const& self, const char* const& key_ptr, void* __result) {
    ::new(__result) (const ParamValue*)(__cpp_closure_8409151989162682602_impl(self, key_ptr));
}
}
#line 220 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

extern "C" {
void __cpp_closure_8829507169130528739(ImageSpec* const& self, const char* const& key_ptr, int32_t const& value) {
#line 472 "src/io/oiio.rs"
                                                                                           
                    self->attribute(key_ptr, (int)value);
                
}
}
#line 220 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

extern "C" {
void __cpp_closure_16262864399618295714(ImageSpec* const& self, const char* const& key_ptr, float const& value) {
#line 477 "src/io/oiio.rs"
                                                                                         
                    self->attribute(key_ptr, (float)value);
                
}
}
#line 220 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

extern "C" {
void __cpp_closure_13863490900036768772(ImageSpec* const& self, const char* const& key_ptr, const char * const& value_ptr) {
#line 486 "src/io/oiio.rs"
                                                                                                        
                        self->attribute(key_ptr, value_ptr);
                    
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline const ParamValue* __cpp_closure_602259086682509676_impl(const ImageSpec* const& self, size_t* const& len_ptr) {
#line 517 "src/io/oiio.rs"
                                                                     
                *len_ptr = self->extra_attribs.size();
                return self->extra_attribs.data();
            
}
extern "C" {
void __cpp_closure_602259086682509676(const ImageSpec* const& self, size_t* const& len_ptr, void* __result) {
    ::new(__result) (const ParamValue*)(__cpp_closure_602259086682509676_impl(self, len_ptr));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline const char* __cpp_closure_11833441470920534017_impl(const ParamValue* const& x, size_t* const& len_ptr) {
#line 529 "src/io/oiio.rs"
                                                                                                             
                    *len_ptr = x->name().size();
                   return x->name().c_str();
                
}
extern "C" {
void __cpp_closure_11833441470920534017(const ParamValue* const& x, size_t* const& len_ptr, void* __result) {
    ::new(__result) (const char*)(__cpp_closure_11833441470920534017_impl(x, len_ptr));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline TypeDesc::BASETYPE __cpp_closure_2026222725339449579_impl(const ParamValue* const& param) {
#line 563 "src/io/oiio.rs"
                                                                                         
                    return (TypeDesc::BASETYPE)param->type().basetype;
                
}
extern "C" {
void __cpp_closure_2026222725339449579(const ParamValue* const& param, void* __result) {
    ::new(__result) (TypeDesc::BASETYPE)(__cpp_closure_2026222725339449579_impl(param));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline int32_t __cpp_closure_15649280902270375412_impl(const ParamValue* const& param) {
#line 572 "src/io/oiio.rs"
                                                                         
                    return *(const int*)param->data();
                
}
extern "C" {
void __cpp_closure_15649280902270375412(const ParamValue* const& param, void* __result) {
    ::new(__result) (int32_t)(__cpp_closure_15649280902270375412_impl(param));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline float __cpp_closure_17090592645279743872_impl(const ParamValue* const& param) {
#line 581 "src/io/oiio.rs"
                                                                       
                    return *(const float*)param->data();
                
}
extern "C" {
void __cpp_closure_17090592645279743872(const ParamValue* const& param, void* __result) {
    ::new(__result) (float)(__cpp_closure_17090592645279743872_impl(param));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline const char* __cpp_closure_906655678685510480_impl(const ParamValue* const& param, size_t* const& len_ptr) {
#line 592 "src/io/oiio.rs"
                                                                                                         
                    auto s = *(const char **)param->data();
                    *len_ptr = strlen(s);
                    return s;
                
}
extern "C" {
void __cpp_closure_906655678685510480(const ParamValue* const& param, size_t* const& len_ptr, void* __result) {
    ::new(__result) (const char*)(__cpp_closure_906655678685510480_impl(param, len_ptr));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline ImageBuf __cpp_closure_8673660014819348432_impl(size_t const& width, size_t const& height, size_t const& channels, TypeDesc::BASETYPE const& base_type, void * const& data) {
#line 622 "src/io/oiio.rs"
                                             
                    auto spec = ImageSpec(width, height, channels, base_type);
                    return ImageBuf(spec, data);
                
}
extern "C" {
void __cpp_closure_8673660014819348432(size_t const& width, size_t const& height, size_t const& channels, TypeDesc::BASETYPE const& base_type, void * const& data, void* __result) {
    ::new(__result) (ImageBuf)(__cpp_closure_8673660014819348432_impl(width, height, channels, base_type, data));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline const ImageBuf __cpp_closure_4896004735896999426_impl(size_t const& width, size_t const& height, size_t const& channels, TypeDesc::BASETYPE const& base_type, void * const& data) {
#line 643 "src/io/oiio.rs"
                                                   
                    auto spec = ImageSpec(width, height, channels, base_type);
                    return ImageBuf(spec, data);
                
}
extern "C" {
void __cpp_closure_4896004735896999426(size_t const& width, size_t const& height, size_t const& channels, TypeDesc::BASETYPE const& base_type, void * const& data, void* __result) {
    ::new(__result) (const ImageBuf)(__cpp_closure_4896004735896999426_impl(width, height, channels, base_type, data));
}
}
#line 239 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"

static inline bool __cpp_closure_3902609123819247214_impl(ImageBuf* const& dest, const ImageBuf* const& self, const char * const& from_space, const char * const& to_space) {
#line 669 "src/io/oiio.rs"
                                     
                    return ImageBufAlgo::colorconvert(*dest, *self, from_space, to_space);
                
}
extern "C" {
void __cpp_closure_3902609123819247214(ImageBuf* const& dest, const ImageBuf* const& self, const char * const& from_space, const char * const& to_space, void* __result) {
    ::new(__result) (bool)(__cpp_closure_3902609123819247214_impl(dest, self, from_space, to_space));
}
}
#line 382 "src/io/oiio.rs"
           RUST_CPP_CLASS_HELPER(1381222990220911934, ImageSpec)
#line 555 "src/io/oiio.rs"
               RUST_CPP_CLASS_HELPER(4466370679730231571, ParamValue)
#line 606 "src/io/oiio.rs"
               RUST_CPP_CLASS_HELPER(3806761322541160199, ImageBuf)
#line 300 "C:\\Users\\shoeb\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\cpp_build-0.5.9\\src\\lib.rs"


namespace rustcpp {

template<typename T>
struct AlignOf {
    struct Inner {
        char a;
        T b;
    };
    static const uintptr_t value = sizeof(Inner) - sizeof(T);
};

template<typename T>
struct Flags {
    static const uintptr_t value =
        (std::is_copy_constructible<T>::value << 0) |
        (std::is_default_constructible<T>::value << 1) |
#if !defined(__GNUC__) || (__GNUC__ + 0 >= 5) || defined(__clang__)
        (std::is_trivially_destructible<T>::value << 2) |
        (std::is_trivially_copyable<T>::value << 3) |
        (std::is_trivially_default_constructible<T>::value << 4) |
#endif
        0;
};

struct SizeAlign {
    uint64_t hash;
    uint64_t size;
    uint64_t align;
    uint64_t flags;
};

struct MetaData {
    uint8_t magic[128];
    uint8_t version[16];
    uint64_t endianness_check;
    uint64_t length;
    SizeAlign data[100];
};

MetaData metadata_12463581289283811007 = {
    { 114, 117, 115, 116, 99, 112, 112, 126, 109, 101, 116, 97, 100, 97, 116, 97, 92, 74, 112, 213, 165, 185, 214, 120, 179, 17, 185, 25, 182, 253, 82, 118, 148, 29, 139, 208, 59, 153, 78, 137, 230, 54, 26, 177, 232, 121, 132, 166, 44, 106, 218, 57, 158, 33, 69, 32, 54, 204, 123, 226, 99, 117, 60, 173, 112, 61, 56, 174, 117, 141, 126, 249, 79, 159, 6, 119, 2, 129, 147, 66, 135, 136, 212, 252, 231, 105, 239, 91, 96, 232, 113, 94, 164, 255, 152, 144, 64, 207, 192, 90, 225, 171, 59, 154, 60, 2, 0, 191, 114, 182, 38, 134, 134, 183, 212, 227, 31, 217, 12, 5, 65, 221, 150, 59, 230, 96, 73, 62 },
    "0.5.9",
    0xffef,
    100,
    { {3695883428175493041ull, 0, 1, 0ull << 32}, {
                3695883428175493041ull,
                sizeof(ImageOutput*),
                rustcpp::AlignOf<ImageOutput*>::value,
                rustcpp::Flags<ImageOutput*>::value
            }, {
                800440552892512734ull,
                sizeof(ImageOutput*),
                rustcpp::AlignOf<ImageOutput*>::value,
                rustcpp::Flags<ImageOutput*>::value | 0ull << 32
            }, {
                800440552892512734ull,
                sizeof(const char *),
                rustcpp::AlignOf<const char *>::value,
                rustcpp::Flags<const char *>::value
            }, {2532899989878101725ull, 0, 1, 0ull << 32}, {
                2532899989878101725ull,
                sizeof(ImageOutput*),
                rustcpp::AlignOf<ImageOutput*>::value,
                rustcpp::Flags<ImageOutput*>::value
            }, {
                2532899989878101725ull,
                sizeof(const char *),
                rustcpp::AlignOf<const char *>::value,
                rustcpp::Flags<const char *>::value
            }, {
                2532899989878101725ull,
                sizeof(TypeDesc::BASETYPE),
                rustcpp::AlignOf<TypeDesc::BASETYPE>::value,
                rustcpp::Flags<TypeDesc::BASETYPE>::value
            }, {
                2532899989878101725ull,
                sizeof(ImageSpec *),
                rustcpp::AlignOf<ImageSpec *>::value,
                rustcpp::Flags<ImageSpec *>::value
            }, {
                2532899989878101725ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                2532899989878101725ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                2532899989878101725ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                2532899989878101725ull,
                sizeof(const void*),
                rustcpp::AlignOf<const void*>::value,
                rustcpp::Flags<const void*>::value
            }, {
                10442838969269650884ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 0ull << 32
            }, {
                10442838969269650884ull,
                sizeof(ImageOutput*),
                rustcpp::AlignOf<ImageOutput*>::value,
                rustcpp::Flags<ImageOutput*>::value
            }, {
                10442838969269650884ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                10442838969269650884ull,
                sizeof(const char *),
                rustcpp::AlignOf<const char *>::value,
                rustcpp::Flags<const char *>::value
            }, {
                10442838969269650884ull,
                sizeof(TypeDesc::BASETYPE),
                rustcpp::AlignOf<TypeDesc::BASETYPE>::value,
                rustcpp::Flags<TypeDesc::BASETYPE>::value
            }, {
                10442838969269650884ull,
                sizeof(ImageSpec *),
                rustcpp::AlignOf<ImageSpec *>::value,
                rustcpp::Flags<ImageSpec *>::value
            }, {
                10442838969269650884ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                10442838969269650884ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                10442838969269650884ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                10442838969269650884ull,
                sizeof(const void*),
                rustcpp::AlignOf<const void*>::value,
                rustcpp::Flags<const void*>::value
            }, {5241648081442455140ull, 0, 1, 0ull << 32}, {
                5241648081442455140ull,
                sizeof(std::unique_ptr<ImageInput>),
                rustcpp::AlignOf<std::unique_ptr<ImageInput>>::value,
                rustcpp::Flags<std::unique_ptr<ImageInput>>::value
            }, {
                15954180456823282382ull,
                sizeof(std::unique_ptr<ImageInput>),
                rustcpp::AlignOf<std::unique_ptr<ImageInput>>::value,
                rustcpp::Flags<std::unique_ptr<ImageInput>>::value | 0ull << 32
            }, {
                15954180456823282382ull,
                sizeof(const char *),
                rustcpp::AlignOf<const char *>::value,
                rustcpp::Flags<const char *>::value
            }, {
                15954180456823282382ull,
                sizeof(ImageSpec*),
                rustcpp::AlignOf<ImageSpec*>::value,
                rustcpp::Flags<ImageSpec*>::value
            }, {
                15954180456823282382ull,
                sizeof(ImageSpec*),
                rustcpp::AlignOf<ImageSpec*>::value,
                rustcpp::Flags<ImageSpec*>::value
            }, {
                5779210747185649108ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 0ull << 32
            }, {
                5779210747185649108ull,
                sizeof(std::unique_ptr<ImageInput>),
                rustcpp::AlignOf<std::unique_ptr<ImageInput>>::value,
                rustcpp::Flags<std::unique_ptr<ImageInput>>::value
            }, {
                5779210747185649108ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                5779210747185649108ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                5779210747185649108ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                5779210747185649108ull,
                sizeof(TypeDesc::BASETYPE),
                rustcpp::AlignOf<TypeDesc::BASETYPE>::value,
                rustcpp::Flags<TypeDesc::BASETYPE>::value
            }, {
                5779210747185649108ull,
                sizeof(void *),
                rustcpp::AlignOf<void *>::value,
                rustcpp::Flags<void *>::value
            }, {
                3425811372157289386ull,
                sizeof(ImageSpec),
                rustcpp::AlignOf<ImageSpec>::value,
                rustcpp::Flags<ImageSpec>::value | 0ull << 32
            }, {
                17553161635844459975ull,
                sizeof(ImageSpec),
                rustcpp::AlignOf<ImageSpec>::value,
                rustcpp::Flags<ImageSpec>::value | 0ull << 32
            }, {
                17553161635844459975ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                17553161635844459975ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                17553161635844459975ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                17553161635844459975ull,
                sizeof(TypeDesc::BASETYPE),
                rustcpp::AlignOf<TypeDesc::BASETYPE>::value,
                rustcpp::Flags<TypeDesc::BASETYPE>::value
            }, {
                10187550477182496639ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value | 0ull << 32
            }, {
                10187550477182496639ull,
                sizeof(const ImageSpec*),
                rustcpp::AlignOf<const ImageSpec*>::value,
                rustcpp::Flags<const ImageSpec*>::value
            }, {
                12801735462753549513ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value | 0ull << 32
            }, {
                12801735462753549513ull,
                sizeof(const ImageSpec*),
                rustcpp::AlignOf<const ImageSpec*>::value,
                rustcpp::Flags<const ImageSpec*>::value
            }, {
                9473949099440781377ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value | 0ull << 32
            }, {
                9473949099440781377ull,
                sizeof(const ImageSpec*),
                rustcpp::AlignOf<const ImageSpec*>::value,
                rustcpp::Flags<const ImageSpec*>::value
            }, {
                2348365456569314999ull,
                sizeof(TypeDesc::BASETYPE),
                rustcpp::AlignOf<TypeDesc::BASETYPE>::value,
                rustcpp::Flags<TypeDesc::BASETYPE>::value | 0ull << 32
            }, {
                2348365456569314999ull,
                sizeof(const ImageSpec*),
                rustcpp::AlignOf<const ImageSpec*>::value,
                rustcpp::Flags<const ImageSpec*>::value
            }, {
                8409151989162682602ull,
                sizeof(const ParamValue*),
                rustcpp::AlignOf<const ParamValue*>::value,
                rustcpp::Flags<const ParamValue*>::value | 0ull << 32
            }, {
                8409151989162682602ull,
                sizeof(const ImageSpec*),
                rustcpp::AlignOf<const ImageSpec*>::value,
                rustcpp::Flags<const ImageSpec*>::value
            }, {
                8409151989162682602ull,
                sizeof(const char*),
                rustcpp::AlignOf<const char*>::value,
                rustcpp::Flags<const char*>::value
            }, {8829507169130528739ull, 0, 1, 0ull << 32}, {
                8829507169130528739ull,
                sizeof(ImageSpec*),
                rustcpp::AlignOf<ImageSpec*>::value,
                rustcpp::Flags<ImageSpec*>::value
            }, {
                8829507169130528739ull,
                sizeof(const char*),
                rustcpp::AlignOf<const char*>::value,
                rustcpp::Flags<const char*>::value
            }, {
                8829507169130528739ull,
                sizeof(int32_t),
                rustcpp::AlignOf<int32_t>::value,
                rustcpp::Flags<int32_t>::value
            }, {16262864399618295714ull, 0, 1, 0ull << 32}, {
                16262864399618295714ull,
                sizeof(ImageSpec*),
                rustcpp::AlignOf<ImageSpec*>::value,
                rustcpp::Flags<ImageSpec*>::value
            }, {
                16262864399618295714ull,
                sizeof(const char*),
                rustcpp::AlignOf<const char*>::value,
                rustcpp::Flags<const char*>::value
            }, {
                16262864399618295714ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value
            }, {13863490900036768772ull, 0, 1, 0ull << 32}, {
                13863490900036768772ull,
                sizeof(ImageSpec*),
                rustcpp::AlignOf<ImageSpec*>::value,
                rustcpp::Flags<ImageSpec*>::value
            }, {
                13863490900036768772ull,
                sizeof(const char*),
                rustcpp::AlignOf<const char*>::value,
                rustcpp::Flags<const char*>::value
            }, {
                13863490900036768772ull,
                sizeof(const char *),
                rustcpp::AlignOf<const char *>::value,
                rustcpp::Flags<const char *>::value
            }, {
                602259086682509676ull,
                sizeof(const ParamValue*),
                rustcpp::AlignOf<const ParamValue*>::value,
                rustcpp::Flags<const ParamValue*>::value | 0ull << 32
            }, {
                602259086682509676ull,
                sizeof(const ImageSpec*),
                rustcpp::AlignOf<const ImageSpec*>::value,
                rustcpp::Flags<const ImageSpec*>::value
            }, {
                602259086682509676ull,
                sizeof(size_t*),
                rustcpp::AlignOf<size_t*>::value,
                rustcpp::Flags<size_t*>::value
            }, {
                11833441470920534017ull,
                sizeof(const char*),
                rustcpp::AlignOf<const char*>::value,
                rustcpp::Flags<const char*>::value | 0ull << 32
            }, {
                11833441470920534017ull,
                sizeof(const ParamValue*),
                rustcpp::AlignOf<const ParamValue*>::value,
                rustcpp::Flags<const ParamValue*>::value
            }, {
                11833441470920534017ull,
                sizeof(size_t*),
                rustcpp::AlignOf<size_t*>::value,
                rustcpp::Flags<size_t*>::value
            }, {
                2026222725339449579ull,
                sizeof(TypeDesc::BASETYPE),
                rustcpp::AlignOf<TypeDesc::BASETYPE>::value,
                rustcpp::Flags<TypeDesc::BASETYPE>::value | 0ull << 32
            }, {
                2026222725339449579ull,
                sizeof(const ParamValue*),
                rustcpp::AlignOf<const ParamValue*>::value,
                rustcpp::Flags<const ParamValue*>::value
            }, {
                15649280902270375412ull,
                sizeof(int32_t),
                rustcpp::AlignOf<int32_t>::value,
                rustcpp::Flags<int32_t>::value | 0ull << 32
            }, {
                15649280902270375412ull,
                sizeof(const ParamValue*),
                rustcpp::AlignOf<const ParamValue*>::value,
                rustcpp::Flags<const ParamValue*>::value
            }, {
                17090592645279743872ull,
                sizeof(float),
                rustcpp::AlignOf<float>::value,
                rustcpp::Flags<float>::value | 0ull << 32
            }, {
                17090592645279743872ull,
                sizeof(const ParamValue*),
                rustcpp::AlignOf<const ParamValue*>::value,
                rustcpp::Flags<const ParamValue*>::value
            }, {
                906655678685510480ull,
                sizeof(const char*),
                rustcpp::AlignOf<const char*>::value,
                rustcpp::Flags<const char*>::value | 0ull << 32
            }, {
                906655678685510480ull,
                sizeof(const ParamValue*),
                rustcpp::AlignOf<const ParamValue*>::value,
                rustcpp::Flags<const ParamValue*>::value
            }, {
                906655678685510480ull,
                sizeof(size_t*),
                rustcpp::AlignOf<size_t*>::value,
                rustcpp::Flags<size_t*>::value
            }, {
                8673660014819348432ull,
                sizeof(ImageBuf),
                rustcpp::AlignOf<ImageBuf>::value,
                rustcpp::Flags<ImageBuf>::value | 0ull << 32
            }, {
                8673660014819348432ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                8673660014819348432ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                8673660014819348432ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                8673660014819348432ull,
                sizeof(TypeDesc::BASETYPE),
                rustcpp::AlignOf<TypeDesc::BASETYPE>::value,
                rustcpp::Flags<TypeDesc::BASETYPE>::value
            }, {
                8673660014819348432ull,
                sizeof(void *),
                rustcpp::AlignOf<void *>::value,
                rustcpp::Flags<void *>::value
            }, {
                4896004735896999426ull,
                sizeof(const ImageBuf),
                rustcpp::AlignOf<const ImageBuf>::value,
                rustcpp::Flags<const ImageBuf>::value | 0ull << 32
            }, {
                4896004735896999426ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                4896004735896999426ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                4896004735896999426ull,
                sizeof(size_t),
                rustcpp::AlignOf<size_t>::value,
                rustcpp::Flags<size_t>::value
            }, {
                4896004735896999426ull,
                sizeof(TypeDesc::BASETYPE),
                rustcpp::AlignOf<TypeDesc::BASETYPE>::value,
                rustcpp::Flags<TypeDesc::BASETYPE>::value
            }, {
                4896004735896999426ull,
                sizeof(void *),
                rustcpp::AlignOf<void *>::value,
                rustcpp::Flags<void *>::value
            }, {
                3902609123819247214ull,
                sizeof(bool),
                rustcpp::AlignOf<bool>::value,
                rustcpp::Flags<bool>::value | 0ull << 32
            }, {
                3902609123819247214ull,
                sizeof(ImageBuf*),
                rustcpp::AlignOf<ImageBuf*>::value,
                rustcpp::Flags<ImageBuf*>::value
            }, {
                3902609123819247214ull,
                sizeof(const ImageBuf*),
                rustcpp::AlignOf<const ImageBuf*>::value,
                rustcpp::Flags<const ImageBuf*>::value
            }, {
                3902609123819247214ull,
                sizeof(const char *),
                rustcpp::AlignOf<const char *>::value,
                rustcpp::Flags<const char *>::value
            }, {
                3902609123819247214ull,
                sizeof(const char *),
                rustcpp::AlignOf<const char *>::value,
                rustcpp::Flags<const char *>::value
            }, {
                1381222990220911934ull,
                sizeof(ImageSpec),
                rustcpp::AlignOf<ImageSpec>::value,
                rustcpp::Flags<ImageSpec>::value
            }, {
                4466370679730231571ull,
                sizeof(ParamValue),
                rustcpp::AlignOf<ParamValue>::value,
                rustcpp::Flags<ParamValue>::value
            }, {
                3806761322541160199ull,
                sizeof(ImageBuf),
                rustcpp::AlignOf<ImageBuf>::value,
                rustcpp::Flags<ImageBuf>::value
            } }
};

} // namespace rustcpp
